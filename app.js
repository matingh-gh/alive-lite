// I18N, state, helpers, etc. (same as v4) with explicit renderTabs('controls') post-onboarding/signup.
const I18N={fa:{title:"Alive Lite – ترک تدریجی",brand:"Alive Lite",subtitle:"ترک تدریجی سیگار – ساخت خودت",tab_controls:"کنترل",tab_dashboard:"داشبورد",tab_history:"تاریخچه",tab_profile:"پروفایل",signup_title:"ساخت حساب",signup_name:"نام شما",signup_lang:"زبان دلخواه",signup_btn:"ساخت حساب",signup_note:"حساب شما فقط روی همین دستگاه ذخیره می‌شود و نیاز به ورود مجدد نیست.",onb_title:"شروع شخصی‌سازی",onb_baseline:"چند نخ در روز می‌کشی؟",onb_wake:"ساعت بیداری در روز؟",onb_reduce:"کاهش هفتگی (%)",onb_start:"شروع برنامه",phase_label:"فاز جاری",phase_next:"ادامه به فاز بعد",phase_stay:"فعلاً همین فاز",target_interval:"فاصله هدف",since_last:"از آخرین سیگار",countdown_label:"زمان باقی‌مانده",btn_smoke:"می‌خوام سیگار بکشم",btn_smoke_ahead:"سیگار خارج از برنامه",wait_msg:"هنوز باید صبر کنی…",dash_title:"داشبورد",kpi_today:"امروز کشیده‌ای",kpi_avg7:"میانگین ۷ روز",kpi_reduction:"کاهش نسبت به پایه",kpi_money:"پول ذخیره‌شده",price_label:"قیمت هر نخ (تخمینی به تومان/یورو)",btn_export:"خروجی JSON",btn_import:"ورودی JSON",btn_reset:"شروع از اول",hist_title:"تاریخچهٔ روزانه",prof_title:"پروفایل",user_card:"اطلاعات کاربر",user_name:"نام",user_lang:"زبان",user_created:"تاریخ ساخت",edit_account:"ویرایش حساب",reset_profile:"حذف/ریست پروفایل",plan_card:"برنامه ترک",plan_baseline:"پایه (نخ/روز)",plan_wake:"ساعت بیداری",plan_reduce:"کاهش هفتگی",plan_phase:"فاز فعلی",plan_interval:"فاصله هدف فعلی",plan_next_ok:"زمان مجاز بعدی",edit_plan:"ویرایش برنامه",progress_card:"پیشرفت",prog_days:"روزهای سپری‌شده از شروع",timeline_card:"تایم‌لاین فازها",minutes:"دقیقه"},en:{title:"Alive Lite – Gradual Quit",brand:"Alive Lite",subtitle:"Gradual cigarette reduction — DIY",tab_controls:"Control",tab_dashboard:"Dashboard",tab_history:"History",tab_profile:"Profile",signup_title:"Create Account",signup_name:"Your name",signup_lang:"Preferred language",signup_btn:"Create account",signup_note:"Your account is stored on this device only. No need to sign in again.",onb_title:"Personalize",onb_baseline:"How many per day?",onb_wake:"Waking hours per day?",onb_reduce:"Weekly reduction (%)",onb_start:"Start plan",phase_label:"Current phase",phase_next:"Advance phase",phase_stay:"Stay in phase",target_interval:"Target interval",since_last:"Since last cigarette",countdown_label:"Time left",btn_smoke:"I will smoke now",btn_smoke_ahead:"Smoke ahead (off-plan)",wait_msg:"Please wait…",dash_title:"Dashboard",kpi_today:"Smoked today",kpi_avg7:"7-day average",kpi_reduction:"Reduction vs baseline",kpi_money:"Money saved",price_label:"Price per cigarette (est.)",btn_export:"Export JSON",btn_import:"Import JSON",btn_reset:"Reset",hist_title:"Daily history",prof_title:"Profile",user_card:"Account",user_name:"Name",user_lang:"Language",user_created:"Created at",edit_account:"Edit account",reset_profile:"Delete/Reset profile",plan_card:"Quit plan",plan_baseline:"Baseline (per day)",plan_wake:"Waking hours",plan_reduce:"Weekly reduction",plan_phase:"Current phase",plan_interval:"Current target interval",plan_next_ok:"Next allowed time",edit_plan:"Edit plan",progress_card:"Progress",prog_days:"Days since start",timeline_card:"Phase timeline",minutes:"min"}};
let LANG=localStorage.getItem("alive-lite:lang")||"fa";function t(k){return I18N[LANG]&&I18N[LANG][k]||k}function applyI18n(){document.documentElement.setAttribute("lang",LANG);document.documentElement.setAttribute("dir","fa"===LANG?"rtl":"ltr");document.querySelectorAll("[data-i18n]").forEach(e=>{const k=e.getAttribute("data-i18n");e.textContent=t(k)})}
const state={started:false,baseline:20,wake:16,reducePct:8,phase:1,lastSmokeAt:null,history:[],pricePerCig:0.5,account:null,planStartedAt:null,phases:[]};
const $=s=>document.querySelector(s);const STORAGE_KEY="alive-lite:v1";function save(){localStorage.setItem(STORAGE_KEY,JSON.stringify(state))}function load(){const r=localStorage.getItem(STORAGE_KEY);if(!r)return;try{Object.assign(state,JSON.parse(r))}catch(e){}}
load();
function minutesBetween(a,b){return Math.floor((a-b)/6e4)}function secondsBetween(a,b){return Math.floor((a-b)/1e3)}function startOfDay(ts){const d=new Date(ts);d.setHours(0,0,0,0);return d.getTime()}function mmss(s){s=Math.max(0,s|0);const m=String(Math.floor(s/60)).padStart(2,"0"),ss=String(s%60).padStart(2,"0");return`${m}:${ss}`}function fmtDate(ts){if(!ts)return"—";return new Date(ts).toLocaleDateString("fa"===LANG?"fa-IR":"en-US",{year:"2-digit",month:"2-digit",day:"2-digit"})}
function currentTargetInterval(){const r=state.reducePct/100,f=Math.pow(1-r,state.phase-1),cigs=Math.max(1,state.baseline*f);return Math.round(state.wake*60/cigs)}
const controls=$("#controls"),stats=$("#stats"),historySec=$("#history"),profileSec=$("#profile");const waitMsg=$("#waitMsg"),targetIntervalEl=$("#targetInterval"),elapsedEl=$("#elapsed"),countdown=$("#countdown"),phaseIndex=$("#phaseIndex");const todayCountEl=$("#todayCount"),avg7El=$("#avg7"),reductionPctEl=$("#reductionPct"),moneySavedEl=$("#moneySaved"),pricePerCigEl=$("#pricePerCig");
function renderTabs(active){document.querySelectorAll(".tab-btn").forEach(b=>b.classList.remove("active"));document.querySelector(`.tab-btn[data-tab="${active}"]`).classList.add("active");[controls,stats,historySec,profileSec].forEach(sec=>sec.classList.add("hidden"));({controls,stats,history:historySec,profile:profileSec}[active]).classList.remove("hidden")}
document.querySelectorAll(".tab-btn").forEach(btn=>btn.addEventListener("click",()=>renderTabs(btn.getAttribute("data-tab"))));
function getTodayCount(){const sod=startOfDay(Date.now());return state.history.filter(h=>h.ts>=sod).length}
function get7DayAvg(){const now=Date.now();let total=0;for(let i=0;i<7;i++){const sod=startOfDay(now-i*864e5),eod=sod+864e5;total+=state.history.filter(h=>h.ts>=sod&&h.ts<eod).length}return(total/7).toFixed(1)}
function reductionPct(){const a=parseFloat(get7DayAvg());if(!a||!state.baseline)return 0;return Math.max(0,Math.round((1-a/state.baseline)*100))}
function moneySaved(){const baselineWeek=state.baseline*7;let weekTotal=0;const now=Date.now();for(let i=0;i<7;i++){const sod=startOfDay(now-i*864e5),eod=sod+864e5;weekTotal+=state.history.filter(h=>h.ts>=sod&&h.ts<eod).length}const avoided=Math.max(0,baselineWeek-weekTotal);return(avoided*state.pricePerCig).toFixed(2)}
function dailyCounts(days=30){const now=Date.now(),out=[];for(let i=0;i<days;i++){const sod=startOfDay(now-i*864e5),eod=sod+864e5,cnt=state.history.filter(h=>h.ts>=sod&&h.ts<eod).length;out.push({date:new Date(sod),count:cnt})}return out}
function renderHistory(){const list=document.getElementById("historyList");list.innerHTML="";dailyCounts(30).forEach(d=>{const row=document.createElement("div");row.className="row";const ds=d.date.toLocaleDateString("fa"===LANG?"fa-IR":"en-US",{weekday:"short",year:"2-digit",month:"2-digit",day:"2-digit"});row.innerHTML=`<span>${ds}</span><b>${d.count}</b>`;list.appendChild(row)})}
function renderProfile(){document.getElementById("pName").textContent=state.account?.name||"—";document.getElementById("pLang").textContent=state.account?.lang||LANG;document.getElementById("pCreated").textContent=fmtDate(state.account?.createdAt);document.getElementById("pBaseline").textContent=state.baseline;document.getElementById("pWake").textContent=state.wake;document.getElementById("pReduce").textContent=state.reducePct;document.getElementById("pPhase").textContent=state.phase;document.getElementById("pInterval").textContent=currentTargetInterval();const nextAllowedSec=Math.max(0,currentTargetInterval()*60-(state.lastSmokeAt?secondsBetween(Date.now(),state.lastSmokeAt):9999*60));document.getElementById("pNextOk").textContent=nextAllowedSec?mmss(nextAllowedSec):"00:00";document.getElementById("pDays").textContent=state.planStartedAt?Math.ceil((Date.now()-state.planStartedAt)/864e5):0;document.getElementById("pToday").textContent=getTodayCount();document.getElementById("pAvg7").textContent=get7DayAvg();document.getElementById("pRed").textContent=reductionPct()+"%";const wrap=document.getElementById("phaseTimeline");wrap.innerHTML="";state.phases.forEach(ph=>{const row=document.createElement("div");row.className="row";const status=ph.endTs?"✅":"🟡";row.innerHTML=`<span>${status} Phase ${ph.index}</span><span>${ph.interval} ${t("minutes")}</span><span>${fmtDate(ph.startTs)} → ${fmtDate(ph.endTs)}</span>`;wrap.appendChild(row)})}
function updateCountdown(){const tiMin=currentTargetInterval(),now=Date.now(),elapsedSec=state.lastSmokeAt?secondsBetween(now,state.lastSmokeAt):9999*60,remainingSec=Math.max(0,tiMin*60-elapsedSec);document.getElementById("countdown").textContent=remainingSec?mmss(remainingSec):"00:00"}
function updateUI(){phaseIndex.textContent=state.phase;targetIntervalEl.textContent=currentTargetInterval();const now=Date.now(),elapsedMin=state.lastSmokeAt?minutesBetween(now,state.lastSmokeAt):9999;elapsedEl.textContent=isFinite(elapsedMin)?elapsedMin:"—";updateCountdown();todayCountEl.textContent=getTodayCount();avg7El.textContent=get7DayAvg();reductionPctEl.textContent=reductionPct()+"%";moneySavedEl.textContent=moneySaved();pricePerCigEl.value=state.pricePerCig;const canSmoke=(state.lastSmokeAt?minutesBetween(Date.now(),state.lastSmokeAt):9999)>=currentTargetInterval();waitMsg.classList.toggle("hidden",canSmoke);waitMsg.textContent=canSmoke?"":t("wait_msg");renderProfile()}
const overlay=$("#overlay"),signupModal=$("#signupModal"),onboardingModal=$("#onboardingModal");function showModal(m){overlay.classList.remove("hidden");m.classList.remove("hidden")}function hideModals(){overlay.classList.add("hidden");signupModal.classList.add("hidden");onboardingModal.classList.add("hidden")}
function maybeShowFirstRun(){if(!state.account){showModal(signupModal);return true}if(!state.started){showModal(onboardingModal);return true}return false}
document.getElementById("createAccount").addEventListener("click",()=>{const name=(document.getElementById("signupName").value||"").trim(),lang=document.getElementById("signupLang").value||"fa";if(!name){alert("fa"===LANG?"نام را وارد کن":"Enter a name");return}state.account={name,createdAt:Date.now(),lang};LANG=lang;localStorage.setItem("alive-lite:lang",LANG);save();applyI18n();hideModals();if(!state.started){showModal(onboardingModal)}else{renderTabs("controls")}});
document.getElementById("autoPlanBtn").addEventListener("click",()=>{const pace=document.getElementById("pace").value,weeks="easy"===pace?12:"fast"===pace?5:8,target=Math.max(2,Math.round((parseInt(document.getElementById("baseline").value||"20",10))*0.1)),r=1-Math.pow(target/Math.max(1,parseInt(document.getElementById("baseline").value||"20",10)),1/weeks);document.getElementById("reduce").value=Math.min(15,Math.max(3,Math.round(100*r)))});
document.getElementById("startPlan").addEventListener("click",()=>{state.baseline=Math.max(1,parseInt(document.getElementById("baseline").value||"20",10));state.wake=Math.min(20,Math.max(8,parseInt(document.getElementById("wake").value||"16",10)));state.reducePct=Math.min(15,Math.max(3,parseInt(document.getElementById("reduce").value||"8",10)));state.phase=1;state.started=true;state.lastSmokeAt=null;state.history=[];state.planStartedAt=Date.now();state.phases=[{index:1,startTs:Date.now(),endTs:null,interval:currentTargetInterval()}];save();hideModals();renderTabs("controls");updateUI();renderHistory()});
document.getElementById("logBtn").addEventListener("click",()=>{const ti=currentTargetInterval(),now=Date.now(),elapsedMin=state.lastSmokeAt?minutesBetween(now,state.lastSmokeAt):9999;if(elapsedMin<ti){updateUI();return}state.lastSmokeAt=now;state.history.push({ts:now});save();updateUI();renderHistory()});
document.getElementById("smokeAheadBtn").addEventListener("click",()=>{const now=Date.now();state.lastSmokeAt=now;state.history.push({ts:now,ahead:true});save();updateUI();renderHistory()});
document.getElementById("advancePhase").addEventListener("click",advancePhase);document.getElementById("advancePhaseProfile").addEventListener("click",advancePhase);function advancePhase(){const now=Date.now(),current=state.phases[state.phases.length-1];if(current&&!current.endTs)current.endTs=now;state.phase+=1;state.phases.push({index:state.phase,startTs:now,endTs:null,interval:currentTargetInterval()});save();updateUI();renderHistory();renderProfile()}
document.getElementById("stayPhase").addEventListener("click",()=>{updateUI()});
document.getElementById("editAccount").addEventListener("click",()=>{const name=prompt(t("user_name"),state.account?.name||"");if(null===name)return;const lang=prompt(t("signup_lang"),state.account?.lang||LANG)||LANG;state.account=state.account||{createdAt:Date.now()};state.account.name=name.trim();state.account.lang=lang;LANG=lang;localStorage.setItem("alive-lite:lang",LANG);save();applyI18n();updateUI()});
document.getElementById("editPlan").addEventListener("click",()=>{showModal(onboardingModal)});
document.getElementById("resetProfile").addEventListener("click",()=>{if(!confirm("fa"===LANG?"همه داده‌های این پروفایل پاک شود؟":"Delete all data for this profile?"))return;localStorage.removeItem(STORAGE_KEY);location.reload()});
document.getElementById("exportJson").addEventListener("click",()=>{const data=JSON.stringify(state,null,2),blob=new Blob([data],{type:"application/json"}),url=URL.createObjectURL(blob),a=document.createElement("a");a.href=url;a.download="alive-lite-export.json";a.click();URL.revokeObjectURL(url)});
document.getElementById("importJson").addEventListener("change",e=>{const file=e.target.files[0];if(!file)return;const reader=new FileReader();reader.onload=()=>{try{const data=JSON.parse(reader.result);Object.assign(state,data);save();updateUI();renderHistory();alert("Imported.")}catch(err){alert("Invalid JSON")}};reader.readAsText(file)});
pricePerCigEl.addEventListener("change",e=>{state.pricePerCig=parseFloat(e.target.value||"0");save();updateUI()});
document.getElementById("langFa").addEventListener("click",()=>{LANG="fa";localStorage.setItem("alive-lite:lang","fa");applyI18n();updateUI();renderHistory()});
document.getElementById("langEn").addEventListener("click",()=>{LANG="en";localStorage.setItem("alive-lite:lang","en");applyI18n();updateUI();renderHistory()});
setInterval(()=>{updateCountdown();renderProfile()},1e3);
let deferredPrompt;const installBtn=document.getElementById("installBtn");window.addEventListener("beforeinstallprompt",e=>{e.preventDefault();deferredPrompt=e;installBtn.classList.remove("hidden")});installBtn.addEventListener("click",async()=>{if(deferredPrompt){deferredPrompt.prompt()}});
if("serviceWorker"in navigator){window.addEventListener("load",()=>{navigator.serviceWorker.register("./service-worker.js")})}
applyI18n();if(!maybeShowFirstRun()){renderTabs("controls");updateUI();renderHistory()}
